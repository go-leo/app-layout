// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package configs

import (
	context "context"
	protox "github.com/go-leo/gox/protox"
	configx "github.com/go-leo/leo/v3/configx"
	sync "sync"
)

var (
	_ConfigConfig      = &Config{}
	_ConfigConfigMutex sync.RWMutex
)

func GetConfigConfig() *Config {
	_ConfigConfigMutex.RLock()
	defer _ConfigConfigMutex.RUnlock()
	return protox.Clone(_ConfigConfig)
}

func SetConfigConfig(conf *Config) {
	_ConfigConfigMutex.Lock()
	_ConfigConfig = protox.Clone(conf)
	_ConfigConfigMutex.Unlock()
}

func LoadConfigConfig(ctx context.Context, opts ...configx.Option) error {
	conf, err := configx.Load[*Config](ctx, opts...)
	if err != nil {
		return err
	}
	SetConfigConfig(conf)
	return nil
}

func WatchConfigConfig(ctx context.Context, opts ...configx.Option) error {
	confC, err := configx.Watch[*Config](ctx, opts...)
	if err != nil {
		return err
	}
	go func() {
		for {
			select {
			case <-ctx.Done():
				return
			case conf := <-confC:
				SetConfigConfig(conf)
			}
		}
	}()
	return nil
}

func LoadAndWatchConfigConfig(ctx context.Context, opts ...configx.Option) error {
	if err := LoadConfigConfig(ctx, opts...); err != nil {
		return err
	}
	return WatchConfigConfig(ctx, opts...)
}

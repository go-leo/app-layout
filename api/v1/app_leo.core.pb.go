// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package api

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	lb "github.com/go-kit/kit/sd/lb"
	log "github.com/go-kit/log"
	lazyloadx "github.com/go-leo/gox/syncx/lazyloadx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	sdx "github.com/go-leo/leo/v3/sdx"
	lbx "github.com/go-leo/leo/v3/sdx/lbx"
	stainx "github.com/go-leo/leo/v3/stainx"
	transportx "github.com/go-leo/leo/v3/transportx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

// UserService is a service
type UserService interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error)
	ListUser(ctx context.Context, request *ListUserRequest) (*ListUserReply, error)
}

type (
	UserService_CreateUser_Handler interface {
		Handle(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error)
	}
	UserService_ListUser_Handler interface {
		Handle(ctx context.Context, request *ListUserRequest) (*ListUserReply, error)
	}
)

// UserServerEndpoints is server endpoints
type UserServerEndpoints interface {
	CreateUser(ctx context.Context) endpoint.Endpoint
	ListUser(ctx context.Context) endpoint.Endpoint
}

// UserClientEndpoints is client endpoints
type UserClientEndpoints interface {
	CreateUser(ctx context.Context) (endpoint.Endpoint, error)
	ListUser(ctx context.Context) (endpoint.Endpoint, error)
}

// UserClientTransports is client transports
type UserClientTransports interface {
	CreateUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	ListUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// UserFactories is client factories
type UserFactories interface {
	CreateUser(ctx context.Context) sd.Factory
	ListUser(ctx context.Context) sd.Factory
}

// UserEndpointers is client endpointers
type UserEndpointers interface {
	CreateUser(ctx context.Context, color string) (sd.Endpointer, error)
	ListUser(ctx context.Context, color string) (sd.Endpointer, error)
}

// UserBalancers is client balancers
type UserBalancers interface {
	CreateUser(ctx context.Context) (lb.Balancer, error)
	ListUser(ctx context.Context) (lb.Balancer, error)
}

// userServerEndpoints implements UserServerEndpoints
type userServerEndpoints struct {
	svc         UserService
	middlewares []endpoint.Middleware
}

func (e *userServerEndpoints) CreateUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateUser(ctx, request.(*CreateUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *userServerEndpoints) ListUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.ListUser(ctx, request.(*ListUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// userFactories implements UserFactories
type userFactories struct {
	transports UserClientTransports
}

func (f *userFactories) CreateUser(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.CreateUser(ctx, instance)
	}
}

func (f *userFactories) ListUser(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.ListUser(ctx, instance)
	}
}

// userEndpointers implements UserEndpointers
type userEndpointers struct {
	target    string
	builder   sdx.Builder
	factories UserFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *userEndpointers) CreateUser(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.CreateUser(ctx), e.logger, e.options...)
}

func (e *userEndpointers) ListUser(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.ListUser(ctx), e.logger, e.options...)
}

// userBalancers implements UserBalancers
type userBalancers struct {
	factory    lbx.BalancerFactory
	endpointer UserEndpointers
	createUser lazyloadx.Group[lb.Balancer]
	listUser   lazyloadx.Group[lb.Balancer]
}

func (b *userBalancers) CreateUser(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ColorExtractor(ctx)
	balancer, err, _ := b.createUser.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.CreateUser))
	return balancer, err
}
func (b *userBalancers) ListUser(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ColorExtractor(ctx)
	balancer, err, _ := b.listUser.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.ListUser))
	return balancer, err
}
func newUserBalancers(factory lbx.BalancerFactory, endpointer UserEndpointers) UserBalancers {
	return &userBalancers{
		factory:    factory,
		endpointer: endpointer,
		createUser: lazyloadx.Group[lb.Balancer]{},
		listUser:   lazyloadx.Group[lb.Balancer]{},
	}
}

// userClientEndpoints implements UserClientEndpoints
type userClientEndpoints struct {
	balancers UserBalancers
}

func (e *userClientEndpoints) CreateUser(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.CreateUser(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *userClientEndpoints) ListUser(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.ListUser(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// userClientService implements UserClientService
type userClientService struct {
	endpoints     UserClientEndpoints
	transportName string
}

func (c *userClientService) CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error) {
	ctx = endpointx.NameInjector(ctx, "/api.User/CreateUser")
	ctx = transportx.NameInjector(ctx, c.transportName)
	endpoint, err := c.endpoints.CreateUser(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *userClientService) ListUser(ctx context.Context, request *ListUserRequest) (*ListUserReply, error) {
	ctx = endpointx.NameInjector(ctx, "/api.User/ListUser")
	ctx = transportx.NameInjector(ctx, c.transportName)
	endpoint, err := c.endpoints.ListUser(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*ListUserReply), nil
}
